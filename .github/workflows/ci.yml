name: Integración continua

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop


jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Usar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install

      - run: npm run build

      - name: Ejecutar tests
        run: npm run test

      - name: Ejecutar ESLint
        run: npm run lint

  containerization:
    needs: integration
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          file: ./Dockerfile
      
  deploy_render:
    needs: containerization
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  feedback_main_pr:
    needs: integration
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    env:
      PR_URL: "${{ github.server_url }}/${{ github.repository_owner }}/${{ github.repository }}/pull/${{ github.event.number }}"
      PR_NUMBER: ${{ github.event.number }}
      SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
      DESTINATION_BRANCH: ${{ github.base_ref }}

    steps:
      # Para poder acceder a datos del repositorio en el paso siguiente.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get head commit message
        id: get-commit-message
        run: |
          # Get the last commit message, not the merge commit.
          text=$(git log -1 --no-merges --pretty=%B)
          # Set it as an output parameter so that the next step can retrieve it. 
          echo "COMMIT_MESSAGE=${text}" >> $GITHUB_OUTPUT

      # Envía un mensaje a un canal de Slack mediante una "Slack App" preconfigurada.
      # El workspace de Slack existe previamente a la ejecución de este workflow.
      # Ref: https://github.com/marketplace/actions/slack-notify
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          # Autorizado como una Slack App.
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          # Incluir el Actions URL y commit (y omitir Ref y Event).
          MSG_MINIMAL: actions url,commit
          # Determina si la acción fue un 'success' o un 'failure' y el color verde o rojo asociado.
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          # Mensaje personalizado para una ejecución con éxito.
          SLACK_MESSAGE_ON_SUCCESS: "\n✅ Pipeline *succeded* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}> from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Mensaje personalizado para una ejecución sin éxito.
          SLACK_MESSAGE_ON_FAILURE: "\n⛔ Pipeline *failed* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}>: '${{ github.event.pull_request.title }}' from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Para usar `\` en los mensajes.
          ENABLE_ESCAPES: true

  feedback_main_push:
    needs: deploy_render
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      PR_URL: "${{ github.server_url }}/${{ github.repository_owner }}/${{ github.repository }}/pull/${{ github.event.number }}"
      PR_NUMBER: ${{ github.event.number }}
      SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
      DESTINATION_BRANCH: ${{ github.base_ref }}

    steps:
      # Para poder acceder a datos del repositorio en el paso siguiente.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get head commit message
        id: get-commit-message
        run: |
          # Get the last commit message, not the merge commit.
          text=$(git log -1 --no-merges --pretty=%B)
          # Set it as an output parameter so that the next step can retrieve it. 
          echo "COMMIT_MESSAGE=${text}" >> $GITHUB_OUTPUT

      # Envía un mensaje a un canal de Slack mediante una "Slack App" preconfigurada.
      # El workspace de Slack existe previamente a la ejecución de este workflow.
      # Ref: https://github.com/marketplace/actions/slack-notify
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          # Autorizado como una Slack App.
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          # Incluir el Actions URL y commit (y omitir Ref y Event).
          MSG_MINIMAL: actions url,commit
          # Determina si la acción fue un 'success' o un 'failure' y el color verde o rojo asociado.
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          # Mensaje personalizado para una ejecución con éxito.
          SLACK_MESSAGE_ON_SUCCESS: "\n✅ Pipeline *succeded* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}> from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Mensaje personalizado para una ejecución sin éxito.
          SLACK_MESSAGE_ON_FAILURE: "\n⛔ Pipeline *failed* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}>: '${{ github.event.pull_request.title }}' from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Para usar `\` en los mensajes.
          ENABLE_ESCAPES: true

  feedback_develop_push:
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    env:
      PR_URL: "${{ github.server_url }}/${{ github.repository_owner }}/${{ github.repository }}/pull/${{ github.event.number }}"
      PR_NUMBER: ${{ github.event.number }}
      SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
      DESTINATION_BRANCH: ${{ github.base_ref }}

    steps:
      # Para poder acceder a datos del repositorio en el paso siguiente.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get head commit message
        id: get-commit-message
        run: |
          # Get the last commit message, not the merge commit.
          text=$(git log -1 --no-merges --pretty=%B)
          # Set it as an output parameter so that the next step can retrieve it. 
          echo "COMMIT_MESSAGE=${text}" >> $GITHUB_OUTPUT

      # Envía un mensaje a un canal de Slack mediante una "Slack App" preconfigurada.
      # El workspace de Slack existe previamente a la ejecución de este workflow.
      # Ref: https://github.com/marketplace/actions/slack-notify
      - name: Slack notification (push)
        if: github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          MSG_MINIMAL: actions url,commit
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          SLACK_MESSAGE_ON_SUCCESS: |
            \n✅ Pipeline *succeded* on branch `${{ github.ref_name }}` pushed by `${{ github.actor }}`.
            \n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}
          SLACK_MESSAGE_ON_FAILURE: |
            \n⛔ Pipeline *failed* on branch `${{ github.ref_name }}` pushed by `${{ github.actor }}`.
            \n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}
          ENABLE_ESCAPES: true

  feedback_develop_pr:
    needs: integration
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    runs-on: ubuntu-latest
    env:
      PR_URL: "${{ github.server_url }}/${{ github.repository_owner }}/${{ github.repository }}/pull/${{ github.event.number }}"
      PR_NUMBER: ${{ github.event.number }}
      SOURCE_BRANCH: ${{ github.head_ref || github.ref_name }}
      DESTINATION_BRANCH: ${{ github.base_ref }}

    steps:
      # Para poder acceder a datos del repositorio en el paso siguiente.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get head commit message
        id: get-commit-message
        run: |
          # Get the last commit message, not the merge commit.
          text=$(git log -1 --no-merges --pretty=%B)
          # Set it as an output parameter so that the next step can retrieve it. 
          echo "COMMIT_MESSAGE=${text}" >> $GITHUB_OUTPUT

      # Envía un mensaje a un canal de Slack mediante una "Slack App" preconfigurada.
      # El workspace de Slack existe previamente a la ejecución de este workflow.
      # Ref: https://github.com/marketplace/actions/slack-notify
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          # Autorizado como una Slack App.
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          # Incluir el Actions URL y commit (y omitir Ref y Event).
          MSG_MINIMAL: actions url,commit
          # Determina si la acción fue un 'success' o un 'failure' y el color verde o rojo asociado.
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          # Mensaje personalizado para una ejecución con éxito.
          SLACK_MESSAGE_ON_SUCCESS: "\n✅ Pipeline *succeded* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}> from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Mensaje personalizado para una ejecución sin éxito.
          SLACK_MESSAGE_ON_FAILURE: "\n⛔ Pipeline *failed* on <${{ env.PR_URL }}|pull request #${{ env.PR_NUMBER }}>: '${{ github.event.pull_request.title }}' from branch `${{ env.SOURCE_BRANCH }}` to branch `${{ env.DESTINATION_BRANCH }}`.\n*Commit message*: ${{ steps.get-commit-message.outputs.COMMIT_MESSAGE }}"
          # Para usar `\` en los mensajes.
          ENABLE_ESCAPES: true
